import type { RunnableConfig } from "@langchain/core/runnables";
import { type CheckpointTuple, type SerializerProtocol, type PendingWrite, CheckpointPendingWrite } from "@langchain/langgraph-checkpoint";
export declare function makeRedisCheckpointKey(threadId: string, checkpointNs: string, checkpointId: string): string;
export declare function makeRedisCheckpointWritesKey(threadId: string, checkpointNs: string, checkpointId: string, taskId: string, idx: number | null): string;
export declare function parseRedisCheckpointWritesKey(redisKey: string): Record<string, string>;
export declare function filterKeys(keys: string[], before?: RunnableConfig, limit?: number): string[];
export declare function dumpWrites(serde: SerializerProtocol, writes: PendingWrite[]): {
    channel: string;
    type: string;
    value: Uint8Array;
}[];
export declare function loadWrites(serde: SerializerProtocol, taskIdToData: Record<string, Record<string, string>>): Promise<CheckpointPendingWrite[]>;
export declare function parseRedisCheckpointData(serde: SerializerProtocol, key: string, data: Record<string, string>, pendingWrites?: CheckpointPendingWrite[]): Promise<CheckpointTuple>;
export declare function parseRedisCheckpointKey(redisKey: string): Record<string, string>;
