import { Database as DatabaseType, Statement } from "better-sqlite3";
import type { RunnableConfig } from "@langchain/core/runnables";
import { BaseCheckpointSaver, type Checkpoint, type CheckpointListOptions, type CheckpointTuple, type SerializerProtocol, type PendingWrite, type CheckpointMetadata } from "@langchain/langgraph-checkpoint";
export declare class SqliteSaver extends BaseCheckpointSaver {
    db: DatabaseType;
    protected isSetup: boolean;
    protected withoutCheckpoint: Statement;
    protected withCheckpoint: Statement;
    constructor(db: DatabaseType, serde?: SerializerProtocol);
    static fromConnString(connStringOrLocalPath: string): SqliteSaver;
    protected setup(): void;
    getTuple(config: RunnableConfig): Promise<CheckpointTuple | undefined>;
    list(config: RunnableConfig, options?: CheckpointListOptions): AsyncGenerator<CheckpointTuple>;
    put(config: RunnableConfig, checkpoint: Checkpoint, metadata: CheckpointMetadata): Promise<RunnableConfig>;
    putWrites(config: RunnableConfig, writes: PendingWrite[], taskId: string): Promise<void>;
    deleteThread(threadId: string): Promise<void>;
    protected migratePendingSends(checkpoint: Checkpoint, threadId: string, parentCheckpointId: string): Promise<void>;
}
